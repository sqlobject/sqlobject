name: Run tests

on: [push, pull_request]

jobs:
  run-tests:
    env:
      not_in_conda: "[]"

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["2.7", "3.5", "3.6", "3.7", "3.8", "3.9", "3.10", "3.11", "3.12", "3.13", "3.14"]
        exclude:
        - os: windows-latest
          python-version: "2.7"
        include:
        - os: ubuntu-latest
          os-name: Linux
          pip-cache-path: ~/.cache/pip
        - os: windows-latest
          os-name: w32
          pip-cache-path: ~\AppData\Local\pip\Cache

    name: Python ${{ matrix.python-version }} @ ${{ matrix.os-name }}
    runs-on: ${{ matrix.os }}

    steps:

      # Setup MySQL
      - uses: ankane/setup-mysql@v1

      # Setup PostgreSQL
      - uses: ankane/setup-postgres@v1
      - name: Setup Postgres user @ Linux
        run: |
          sudo -u postgres psql --command="ALTER USER runner CREATEDB ENCRYPTED PASSWORD 'test'"
        if: ${{ runner.os == 'Linux' }}
      - name: Setup Postgres user @ w32
        run: |
          psql --command="CREATE USER runner CREATEDB ENCRYPTED PASSWORD 'test'"
        if: ${{ runner.os == 'Windows' }}

      # Setup Python/pip
      - uses: actions/checkout@v4
      - uses: conda-incubator/setup-miniconda@v3
        with:
          channels: conda-forge, conda-forge/label/python_rc
          miniforge-version: latest
          python-version: ${{ matrix.python-version }}
        if: ${{ !contains(fromJSON(env.not_in_conda), matrix.python-version) }}
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
        if: ${{ contains(fromJSON(env.not_in_conda), matrix.python-version) }}
      - uses: actions/cache@v4
        with:
          path: ~/conda_pkgs_dir
          key: ${{ runner.os }}-conda
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ${{ matrix.pip-cache-path }}
          key: ${{ runner.os }}-pip

      # Setup tox
      - name: Install dependencies
        run: |
          python --version
          python -m pip || python -m ensurepip --default-pip --upgrade
          python -m pip install --upgrade pip setuptools wheel
          pip --version
          pip install --upgrade virtualenv "tox >= 3.15, < 4"
        shell: bash -el {0}
      - name: Set PYVER
        run: |
          python -c "
          import os, sys
          ld_library_path = None
          pyver = '%d%d' % tuple(sys.version_info[:2])
          if os.name == 'posix':
            if pyver == '27':  # Python 2.7 on Linux requires `$LD_LIBRARY_PATH`
                ld_library_path = os.path.join(
                  os.path.dirname(os.path.dirname(sys.executable)), 'lib')
          with open(os.environ['GITHUB_ENV'], 'a') as f:
            if ld_library_path:
              f.write('LD_LIBRARY_PATH=' + ld_library_path + '\n')
            f.write('PYVER=' + pyver + '\n')
            f.write('PGPASSWORD=test\n')
          "
        shell: bash -el {0}

      - name: tox version
        run: |
          tox --version
        shell: bash -el {0}
      - name: Run tox @ Linux
        run: |
          devscripts/tox-select-envs $PYVER-mysql &&
          devscripts/tox-select-envs $PYVER-postgres &&
          devscripts/tox-select-envs $PYVER-sqlite &&
          devscripts/tox-select-envs $PYVER-flake8
        if: ${{ runner.os == 'Linux' }}
        shell: bash -el {0}
      - name: Run tox @ w32
        run: >
          devscripts\\tox-select-envs.cmd %PYVER%-mysql &&
          devscripts\\tox-select-envs.cmd %PYVER%-postgres &&
          devscripts\\tox-select-envs.cmd %PYVER%-sqlite
        if: ${{ runner.os == 'Windows' }}
        shell: cmd /C CALL {0}
